{%- macro package_dict(name, state, pip_extra_args) -%}
{% set search_already_managed = packages_already_managed
                                | selectattr("name", "equalto", name)
                                | list %}
{% if (search_already_managed | length == 0
       or (search_already_managed | first).state != state)
      and (state != "present"
           or (state == "present"
               and name not in packages_already_present)) %}
{% set ns.found = true %}
- name: "{{ name }}"
  state: "{{ state }}"
{% endif %}
{% if pip_extra_args | length > 0 %}
  pip_extra_args: "{{ pip_extra_args }}"
{% endif %}
{%- endmacro -%}

{% set ns = namespace(found=false) %}
{% if packages_spec is not none %}
{% for distro in packages_spec.keys() | list %}
{% if distro | lower == ansible_facts.distribution | lower
      or distro | lower == "all" %}
{% for release in packages_spec[distro] %}
{% if release | string | lower == ansible_facts.distribution_major_version
                                  | string
                                  | lower
      or release | string | lower == "all" %}

{% if packages_spec[distro][release] is iterable
      and packages_spec[distro][release] is not string
      and packages_spec[distro][release] is not mapping  %}
{% for package in packages_spec[distro][release] %}
{% set package_name = package.name | default(package.keys() | list | first) %}
{% set package_state =  package.state | default(package.values() | list | first) %}
{% set packages_pip_extra_args = package.pip_extra_args | default("") %}
{{ package_dict(package_name, package_state, packages_pip_extra_args) }}
{% endfor %}
{% else %}
{% for package in packages_spec[distro][release] %}
{% set package_name = package %}
{% set package_state = packages_spec[distro][release][package] %}
{{ package_dict(package_name, package_state, packages_pip_extra_args) }}
{% endfor %}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% if not ns.found %}
[]
{% endif %}
