---

- name: Compile python
  block:
    - name: Gather packages facts
      ansible.builtin.package_facts:

    - name: Setup python compile directory
      ansible.builtin.file:
        path: "{{ packages_python_source_compile_dir }}"
        state: directory
        mode: "{{ packages_python_source_compile_dir_mode }}"

    - name: Setup required packages to compile python
      ansible.builtin.yum:
        name: "{{ packages_python_sources_requirement_item }}"
        state: present
      loop: "{{ packages_python_source_required_packages }}"
      loop_control:
        loop_var: packages_python_sources_requirement_item

    - name: Copy python source package
      ansible.builtin.copy:
        src: "{{  }}"
        dest: "{{ packages_python_source_compile_dir }}"
        mode: 0644
        remote_src: "{{ _remote | bool }}"
      when: packages_python_source_path | default("") | length > 0

    - name: Download python source package
      ansible.builtin.get_url:
        dest: "{{ packages_python_source_compile_dir }}"
        mode: 0644
        timeout: "{{ packages_python_source_timeout }}"
        url: "{{ packages_python_source_url }}"
        validate_certs: >-
          {{ packages_python_source_validate_certs | bool }}
      when: packages_python_source_path | default("") | length == 0

    - name: Unarchive python source package
      ansible.builtin.unarchive:
        src: "{{ packages_python_source_full_path }}"
        remote_src: yes
        dest: "{{ packages_python_source_compile_dir }}"
        creates: "{{ packages_python_source_dir }}"

    - name: Configure python source
      ansible.builtin.command: >-
        ./configure
        --enable-optimizations
        --prefix={{ packages_python_source_install_dir }}
      args:
        chdir: "{{ packages_python_source_dir }}"
      changed_when: yes

    - name: Compile and install python
      ansible.builtin.command: make install
      args:
        chdir: "{{ packages_python_source_dir }}"
      changed_when: yes

    - name: Restore required packages to compile python to previous state
      ansible.builtin.yum:
        name: "{{ packages_python_sources_requirement_item }}"
        state: absent
      loop: >-
        {{ packages_python_source_required_packages
           | difference(ansible_facts.packages.keys())
           | list }}
      loop_control:
        loop_var: packages_python_sources_requirement_item

    - name: Remove python source artifacts
      ansible.builtin.file:
        path: "{{ packages_python_source_artifact_item }}"
        state: absent
      loop:
        - "{{ packages_python_source_full_path }}"
        - "{{ packages_python_source_dir }}"
      loop_control:
        loop_var: packages_python_source_artifact_item

    - name: Install virtualenv
      ansible.builtin.pip:
        name: virtualenv
        state: present
        executable: >-
          {{ packages_python_source_install_dir
             + "/bin/pip"
             + packages_python_source_version_major_minor }}
  environment: "{{ packages_environment }}"
  vars:
    packages_python_source_required_packages:
      - bzip2-devel
      - gcc
      - gzip
      - tar
      - openssl-devel
  tags:
    - role::packages
    - role::packages::os
    - role::packages::python
    - role::packages::python::compile