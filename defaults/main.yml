---
# Role default lower priority variables

# Dictionary with the operating system packages to manage for each distribution
# name/major release combination. The structure of the dict is the following:
#
# {
#   <distribution name 1>:
#     <distribution 1 major release 1>:
#       <package name 1>: <state (as expected by ansible package module)>
#       <package name 2>: <state>
#       <package name N>: <state>
#     <distribution 1 major release 2>:
#       <package name 1>: <state>
#       <package name 2>: <state>
#       <package name N>: <state>
#     <distribution 1 major release N>:
#       <package name 1>: <state>
#       <package name 2>: <state>
#       <package name N>: <state>
#
#   <distribution name 2>:
#     <distribution 2 major release 1>:
#       <package name 1>: <state>
#       <package name 2>: <state>
#       <package name N>: <state>
#     <distribution 2 major release 2>:
#       <package name 1>: <state>
#       <package name 2>: <state>
#       <package name N>: <state>
#     <distribution 2 major release N>:
#       <package name 1>: <state>
#       <package name 2>: <state>
#       <package name N>: <state>
# }
#
# In the previous dictionary you can replace distribion name/major release by
# the `all` keyword to apply that config to all distributions/releases.
#
# If the order of the packages is important, you can replace the dictionary
# structure for the packages by a list of dictionaries in this way:
# {
#   <distribution name 1>:
#     <distribution 1 major release 1>:
#       - <package name 1>: <state (as expected by ansible package module)>
#       - <package name 2>: <state>
#       - <package name N>: <state>
#    ...
# }
#
# If the name of the package needs to be generated by jinja, you can expand the
# list of dictionaries detailed before in this way:
# {
#   <distribution name 1>:
#     <distribution 1 major release 1>:
#       - name: <package name 1>
#         state: <state (as expected by ansible package module)>
#       - name: <package name2>
#         state: <state>
#       - name: <package name3>
#         state: <state>
#    ...
# }
#
# The list of dicts structure detailed before also supports the following
# additional attributes:
#
# disable_gpg_check: <yes_no>       # Disable or not gpg check

packages_os: {}

# List of handlers to notify when there are changes on operating system packages

packages_os_notify: []

# Force operating system packages tasks even though is not necesary

packages_os_force: "{{ packages_force }}"

# Dictionary with the python packages to manage for each distribution name/major
# release combination. The structure of the dict is the same that for the
# variable `packages_os`.
#
# This variable accepts also the following extra pip arguments for the python
# packages, with the same meaning that in ansible `pip` module:
#
# - `virtualenv`
# - `virtualenv_command`
# - `virtualenv_site_packages`
# - `extra_args`
#
# {
#   <distribution name 1>:
#     <distribution 1 major release 1>:
#       - name: <package name 1>
#         state: <state (as expected by ansible package module)>
#         virtualenv: <path>
#         virtualenv_command: <path>
#         virtualenv_site_packages: <path>
#         extra_args: <args>
#       - name: <package name2>
#         state: <state>
#         virtualenv: <path>
#         virtualenv_command: <path>
#         virtualenv_site_packages: <path>
#         extra_args: <args>
#       - name: <package name3>
#         state: <state>
#         virtualenv: <path>
#         virtualenv_command: <path>
#         virtualenv_site_packages: <path>
#         extra_args: <args>
#    ...
# }

packages_python: {}

# List of handlers to notify when there are changes on python packages

packages_python_notify: []

# Force python packages tasks even though is not necesary

packages_python_force: "{{ packages_force }}"

# Global extra arguments for the python pip tool if no other ones are specified
# in the package config. See `packages_python` documentation before

# packages_python_extra_args:

# The role installs the python packages into a virtualenv in order to not
# overwrite the python packages installed by the operating system

packages_python_virtualenv: /var/lib/ansible/venv
# packages_python_virtualenv_command:
packages_python_virtualenv_python: /usr/bin/python3
packages_python_virtualenv_site_packages: yes

# Indicate if `ansible_python_interpreter` must be pointed by the role to the
# virtualenv python interpreter located in the path defined by the variable
# `packages_python_virtualenv`. This ensures that the virtualenv defined is used
# by the ansible tasks, but you can get the same functionality if you point in
# your inventory the variable `ansible_python_interpreter` to the python binary
# inside the path defined in `packages_python_virtualenv`

packages_python_set_ansible_interpreter: yes

# Dict with distribution aliases. Before comparing ansible_facts distribution
# name against the required distribution, this map will be applied.

packages_distribution_aliases:
  redhat: rhel
  rocky: centos
  almalinux: centos

# Disable gpg check

packages_disable_gpg_check: no

# List of plugins to disable

packages_disable_plugins:
  - fastestmirror

# List of plugins to enable

packages_enable_plugins: []

# Indicate packages must be loaded also from host variables. See
# `packages_os_load_from_hostvars` and `packages_python_load_from_hostvars`
# variables below for details

packages_load_from_hostvars: no

# Indicate `packages_os` must be loaded also from host variables. Any host
# variable that begins with "packages_os_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `packages_os`

packages_os_load_from_hostvars: "{{ packages_load_from_hostvars }}"

# Indicate `packages_python` must be loaded also from host variables. Any host
# variable that begins with "packages_python_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `packages_python`

packages_python_load_from_hostvars: "{{ packages_load_from_hostvars }}"

# Value to setup TMPDIR environment variable during tasks. This is may be
# necesary for python packages if you have /tmp directory protected with noexec
# flag

packages_tmp_dir: /tmp

# Force tasks even though is not necesary. You can tune what tasks to force
# using packages_force_os and packages_force_python

packages_force: no

# Timeout for info gathering and install tasks. This avoids buggy hosts lock
# playbook

packages_timeout: 120

# Poll time for install tasks

packages_poll: 3

# Debug role

packages_debug: no

# Enable or disable the role

packages_enabled: yes
