---
# Role default lower priority variables

# Dictionary with the operating system packages to manage for each distribution
# name/major release combination. The structure of the dict is the following:
#
# {
#   <distribution name 1>:
#     <distribution 1 major release 1>:
#       <package name 1>: <state (as expected by ansible package module)>
#       <package name 2>: <state>
#       <package name N>: <state>
#     <distribution 1 major release 2>:
#       <package name 1>: <state>
#       <package name 2>: <state>
#       <package name N>: <state>
#     <distribution 1 major release N>:
#       <package name 1>: <state>
#       <package name 2>: <state>
#       <package name N>: <state>
#
#   <distribution name 2>:
#     <distribution 2 major release 1>:
#       <package name 1>: <state>
#       <package name 2>: <state>
#       <package name N>: <state>
#     <distribution 2 major release 2>:
#       <package name 1>: <state>
#       <package name 2>: <state>
#       <package name N>: <state>
#     <distribution 2 major release N>:
#       <package name 1>: <state>
#       <package name 2>: <state>
#       <package name N>: <state>
# }
#
# In the previous dictionary you can replace distribion name/major release by
# the `all` keyword to apply that config to all distributions/releases.
#
# If the order of the packages is important, you can replace the dictionary
# structure for the packages by a list of dictionaries in this way:
# {
#   <distribution name 1>:
#     <distribution 1 major release 1>:
#       - <package name 1>: <state (as expected by ansible package module)>
#       - <package name 2>: <state>
#       - <package name N>: <state>
#    ...
# }
#
# If the name of the package needs to be generated by jinja, you can expand the
# list of dictionaries detailed before in this way:
# {
#   <distribution name 1>:
#     <distribution 1 major release 1>:
#       - name: <package name 1>
#         state: <state (as expected by ansible package module)>
#       - name: <package name2>
#         state: <state>
#       - name: <package name3>
#         state: <state>
#    ...
# }

packages_os:

# Dictionary with the python packages to manage for each distribution name/major
# release combination. The structure of the dict is the same that for the
# variable `packages_os`.
#
# This variable accepts also the extra pip arguments to use for an sepecific
# package by adding `pip_extra_args` dictionary attribute to the expanded list
# of packages:
#
# {
#   <distribution name 1>:
#     <distribution 1 major release 1>:
#       - name: <package name 1>
#         state: <state (as expected by ansible package module)>
#         pip_extra_args: <args>
#       - name: <package name2>
#         state: <state>
#         pip_extra_args: <args>
#       - name: <package name3>
#         state: <state>
#         pip_extra_args: <args>
#    ...
# }

packages_python:

#
# Global extra arguments for the python pip tool
#

packages_pip_extra_args: ""

# Indicate packages must be loaded also from host variables. See
# `packages_os_load_from_hostvars` and `packages_python_load_from_hostvars`
# variables below for details

packages_load_from_hostvars: no

# Indicate `packages_os` must be loaded also from host variables. Any host
# variable that begins with "packages_os_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `packages_os`

packages_os_load_from_hostvars: "{{ packages_load_from_hostvars }}"

# Indicate `packages_python` must be loaded also from host variables. Any host
# variable that begins with "packages_python_*" and contains the necessary
# attributes will be loaded as an item to manage by the role. The variables must
# follow the structure detailed before for `packages_python`

packages_python_load_from_hostvars: "{{ packages_load_from_hostvars }}"
